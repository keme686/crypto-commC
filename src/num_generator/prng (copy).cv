//#include "../StreamCipher.h"
#include "../bunny24.h"
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<stdint.h>

#include <openssl/bio.h>
#include <openssl/bn.h>

#include "../StreamCipher/All5.h"
#include "../StreamCipher/Maj5.h"

void printBinary(uint64_t x, int d)
{
  char buffer[d+1];
  int index=0;
  while(d>0)
  {
   if(x&1)
     buffer[index++]='1';
   else 
     buffer[index++]='0';
   x>>=1;
   d--;
  }
  while(index>0)
   printf("%c", buffer[--index]);
   return;
}
//len = length of result
void byte2longr(uint8_t* bytes, unsigned int len,unsigned int nbits,  uint64_t* result)
{
  int i;
  *result = 0;
  for(i=0;i<nbits; i++)
  {
    *result <<=8;
    *result ^=bytes[i];
  }  
}
void fprng(uint8_t* num, int length)
{
  FILE *fp;
  unsigned int iseed = (unsigned int)time(NULL);
  srand (iseed);
  int i;
 uint8_t msg[8];
  uint64_t state = 0;
  for(i=0; i<length; i++)
  {
   int j = (int)(2.0*rand() /(RAND_MAX + 1.0));
   state<<=1;
   state ^=j;
  }
// stream_encrypt(ALL5, msg, num, 64);
 uint64_t key =   0;
 for(i=0; i<length; i++)
  {
   int j = (int)(2.0*rand() /(RAND_MAX + 1.0));
   key<<=1;
   key ^=j;
  }
 uint64_t poly = 0x80027;
 lfsr(&poly, &state, 19, length, msg);

  maj5_encrypt(msg, key, num, length);
 //all5_encrypt(msg, key, num, 64);
}

void sprng(uint8_t* num, int length)
{
  uint8_t key[3];
  uint8_t iv[3];
  unsigned int n = length/8 + (length%8>0?1:0);
  uint8_t msg[n];
  fprng(key, 24);
  fprng(iv, 24);
  fprng(msg, n*8);
  uint64_t k=0;
  uint64_t ivk=0;
  byte2longr(key, 1, 24, &k);
  byte2longr(iv, 1, 24, &ivk);
  BunnyTncbc_encrypt(msg, n, k, ivk, num); 
}
void primeNum(uint8_t* num, int length){

	BIGNUM *n;
	
	n = BN_new();

	int exit = 0 , i = 0;
	int byteLength = length / 8 + ((length % 8 != 0) ? 1 : 0); //length in byte
	uint8_t res[byteLength];	

	do{		
		fprng(num , length);	//generate a number
		 printf("\nFPRNGPrime:");
  for(i=0; i<8; i++)
   printBinary(num[i], 8);
  printf("\n");
		memset(res , 0 , byteLength * sizeof(uint8_t));	//initialize to 0
		
		for(i = 0; i < length; i++)
			res[i/8] |= (num[i] << (i % 8));	
		//from array of bits to array of byte --> i / 8 : current byte m, i % 8 : current bit inside the byte	

		n = BN_bin2bn((const unsigned char *) res, byteLength , NULL);	//to big number
	        int checks = BN_prime_checks_for_size(length);
		if(BN_is_prime(n ,checks, NULL, NULL, NULL))
			exit = 1;

	}while(exit == 0);
}

int main()
{
  uint8_t num[8]={0};
   
  fprng(num, 64);
  
  int i;
    printf("\nFPRNG:");
  for(i=0; i<8; i++)
   printBinary(num[i], 8);
  printf("\nSPRNG:");
sprng(num, 64);
  for(i=0; i<8; i++)
   printBinary(num[i], 8);
  printf("\n");
primeNum(num, 64);
  for(i=0; i<8; i++)
   printBinary(num[i], 8);
  printf("\n");

 return 0;

}
